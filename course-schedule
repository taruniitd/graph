//https://leetcode.com/problems/course-schedule/
//https://www.geeksforgeeks.org/find-whether-it-is-possible-to-finish-all-tasks-or-not-from-given-dependencies/
#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;

vector<unordered_set<int>> make_graph(int numTasks, vector<pair<int,int>> course_path)
{
    vector<unordered_set<int>> graph(numTasks);
    for(auto pre : course_path)
        graph[pre.second].insert(pre.first);
    return graph;
}

bool dfs_cycle(vector<unordered_set<int>> &graph, int node, 
                vector<bool> &onpath, vector<bool> &visited)
{
    if(visited[node])
        return false;
    onpath[node] = visited[node] = true;
    
    for(int neigh : graph[node])
        if(onpath[neigh] ||
                dfs_cycle(graph, neigh, onpath, visited))
            return true;
    
    return onpath[node] = false;
}
bool canFinish(int numTasks, vector<pair<int,int>> &course_path)
{
    vector<unordered_set<int>> graph = make_graph(numTasks, course_path);
    vector<bool> onpath(numTasks, false), visited(numTasks, false);
    
    for(int i = 0; i < numTasks; i++)
    {
        if(!visited[i] && dfs_cycle(graph, i , onpath, visited))
            return false;
    }
    return true;
}
int main()
{
    int numTasks = 4;
    vector<pair<int,int>> course_path;
    
    course_path.push_back(make_pair(0,1));
    course_path.push_back(make_pair(1,0));
    course_path.push_back(make_pair(3,2));
    
    if(canFinish(numTasks, course_path))
    {
        cout << "possible to finish all courses " << endl;
    }
    else
    {
        cout << "Impossible to finish all courses " << endl;
    }
}
