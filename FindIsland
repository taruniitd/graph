//https://www.geeksforgeeks.org/find-number-of-islands/
#include <iostream>
#include <bits/stdc++.h>
using namespace std;

#define R 5
#define C 5
int allowRowNbr[] = { -1, -1, -1, 0, 1, 1,  1, 0};
    
int allowColNbr[] = { -1,  0,  1, 1, 1, 0, -1, -1};

bool isSafe(int mat[][C], int curRow, int curCol, bool visited[][C])
{
    if((curRow >= 0) && (curRow < R) && (curCol >= 0) && (curCol < C) && mat[curRow][curCol] && !visited[curRow][curCol])
        return true;
    return false;
}
void DFS(int mat[][C], int row, int col, bool visited[][C])
{
    visited[row][col] = true;

    for(int dir = 0; dir < 8; dir++)
    {
        if(isSafe(mat, row + allowRowNbr[dir], col + allowColNbr[dir], visited))
        {
            cout << "safe passed for : " << "r = " << row + allowRowNbr[dir] << "c = " << col + allowColNbr[dir] << endl;
            DFS(mat, row + allowRowNbr[dir], col + allowColNbr[dir], visited);
        }
    }
}

int countIsland(int mat[][C], int row, int col, bool visited[][C])
{
    int count = 0;
    for(int r = 0; r < row; r++)
    {
        for(int c = 0; c < col; c++)
        {
            if(mat[r][c] && !visited[r][c])
            {
                cout << "starting vertex :" << r << "  "  << c << endl;
                DFS(mat, r, c, visited);
                count++;
            }
            
        }
    }
    return count;
}

void DFS(vector<vector<int>> &Mat, int i, int j, int row, int col)
{
    if( i < 0 || j < 0 || i > (row - 1) || j > (col - 1) || Mat[i][j] != 1)
        return;
    if(Mat[i][j] == 1)
    {
        Mat[i][j] = 0;
        DFS(Mat, i + 1, j, row, col);
        DFS(Mat, i - 1, j, row, col);
        DFS(Mat, i, j + 1, row, col);
        DFS(Mat, i, j - 1, row, col);
        DFS(Mat, i + 1, j + 1, row, col);
        DFS(Mat, i - 1, j - 1, row, col);
        DFS(Mat, i + 1, j - 1, row, col);
        DFS(Mat, i - 1, j + 1, row, col);
    }
}

int countIslands_1(vector<vector<int>> &Mat)
{
    int row = Mat.size();
    int col = Mat[0].size();
    
    int count = 0;
    
    for(int i = 0; i < row; i++)
    {
        for(int j = 0; j < col; j++)
        {
            if(Mat[i][j] == 1)
            {
                Mat[i][j] = 0;
                count++;
                DFS(Mat, i + 1, j, row, col);
                DFS(Mat, i - 1, j, row, col);
                DFS(Mat, i, j + 1, row, col);
                DFS(Mat, i, j - 1, row, col);
                DFS(Mat, i + 1, j + 1, row, col);
                DFS(Mat, i - 1, j - 1, row, col);
                DFS(Mat, i + 1, j - 1, row, col);
                DFS(Mat, i - 1, j + 1, row, col);
            }
        }
    }
    return count;
}
int main()
{
    int mat[R][C] = {   { 1, 0, 1, 1, 1},
                        { 0, 1, 1, 0, 0},
                        { 0, 0, 0, 0, 0},
                        { 1, 0, 0, 0, 1},
                        { 0, 1, 0, 1, 0} };
    bool visited[R][C];
    memset(visited, 0, sizeof(visited)); //{ 0 };
    int numIsland = countIsland(mat, R, C, visited);
    cout << "number of island = " << numIsland << endl;
    vector<vector<int>> M = {{1, 1, 0, 0, 0},
                             {0, 1, 0, 0, 1},
                             {1, 0, 0, 1, 1},
                             {0, 0, 0, 0, 0},
                             {1, 0, 1, 0, 1}};
    int numIsland1 = countIslands_1(M);
    cout << "number of island using new func = " << numIsland1 << endl;
    return 0;
}
