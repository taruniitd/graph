//https://www.geeksforgeeks.org/atlantic-pacific-water-flow/
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int x[] = {0, 0, -1, 1};
int y[] = {1, -1, 0, 0};

bool safe(int i, int j, int N, int M)
{
    if(i < 0 || j < 0 || i >= N || j >= M)
        return false;
    return true;
}

void BFS(vector<vector<int>> mat, int N, int M, 
        queue<pair<int,int>> q, 
        vector<vector<bool>> &visited)
{
    while(q.empty() == false)
    {
        pair<int,int> cur = q.front();
        q.pop();
        
        visited[cur.first][cur.second] = true;
        for(int i = 0; i < 4; i++)
        {
            int nx = cur.first + x[i];
            int ny = cur.second + y[i];
            
            if(safe(nx,ny,N,M) &&
                mat[nx][ny] >= mat[cur.first][cur.second] &&
                visited[nx][ny] == false)
            {
                q.push({nx,ny});
                visited[nx][ny] = true;
            }
        }
    }
}

int countCoordinates(vector<vector<int>> mat, int N, int M)
{
    queue<pair<int,int>> q1, q2;
    
    vector<vector<bool>> visited1(N, vector<bool>(M,false));
    vector<vector<bool>> visited2(N, vector<bool>(M,false));
    
    for(int i = 0; i < M; i++)
    {
        q1.push({0, i});
        q2.push({N - 1, i});
    }
    for(int j = 0; j < N - 1; j++)
    {
        q1.push({j + 1, 0});
        q2.push({j, M - 1});
    }
    BFS(mat, N, M, q1, visited1);
    BFS(mat, N, M, q2, visited2);
    
    int ans = 0;
    for(int i = 0; i < N; i++)
    {
        for(int j = 0; j < M; j++)
        {
            if(visited1[i][j] && visited2[i][j])
                ans++;
        }
    }
    return ans;
}

int main()
{
    vector<vector<int>> mat = { {1, 2, 2, 3, 5},
                                {3, 2, 3, 4, 4},
                                {2, 4, 5, 3, 1},
                                {6, 7, 1, 4, 5},
                                {5, 1, 1, 2, 4} };
    cout << countCoordinates(mat, mat.size(), mat[0].size());
    return 0;
}
