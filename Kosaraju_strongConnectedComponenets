#include <iostream>
#include <bits/stdc++.h>
using namespace std;

/* Kosaraju Algorithm runs 1st DFS traversal for filling into Stack */
/* 2nd iteration for transposing the graph */
/* 3rd iteration for again DFS traversal over transposed graph based on stack's poped vertex */
class DirectedGraph
{
    int numVertex;
    
    list<int> *adjList;
    
    
    
    //stack<int> Stack;
    
    public: 
    
    bool *visited;
    
    DirectedGraph(int numVertex);
    
    void addEdge(int src, int dest);
    
    void fillOrderInStack(int v, stack<int> &Stack);
    
    DirectedGraph gphTranspose();
    
    void DFSUtil(int curVer);
    
    void printStrgConnComp();
};

DirectedGraph :: DirectedGraph(int V)
{
    numVertex = V;
    adjList = new list<int>[numVertex];
    visited = new bool[numVertex];   
}

void DirectedGraph :: addEdge(int src, int dest)
{
    adjList[src].push_back(dest);
}

void DirectedGraph :: fillOrderInStack(int v, stack<int> &Stack)
{
    visited[v] = true;
    list<int>::iterator listIter;
    for(listIter = adjList[v].begin(); listIter != adjList[v].end(); ++listIter)
    {
        if(!visited[*listIter])
        {
            //cout << "Fill DFS order : " << *listIter << "   ";
            fillOrderInStack(*listIter, Stack);
        }
    }
        
    Stack.push(v);
    //cout << "Vertex order in stack :" << endl;
    //cout << v;
}

DirectedGraph DirectedGraph :: gphTranspose()
{
    DirectedGraph gphTr(numVertex);
    
    for(int ver = 0; ver < numVertex; ver++)
    {
        list<int>::iterator listIter;
        for(listIter = adjList[ver].begin(); listIter != adjList[ver].end(); ++listIter)
        {
            gphTr.addEdge(*listIter, ver);
        }
    }
    return gphTr;
    
}

void DirectedGraph :: DFSUtil(int curVer)
{
    visited[curVer] = true;
    cout << "current strongly conneced Vertex are : " << curVer << "  ";
    list<int>::iterator listIter;
    for(listIter = adjList[curVer].begin(); listIter != adjList[curVer].end(); ++listIter)
    {
        if(!visited[*listIter])
        {
            //cout << "cur visited : " << *listIter;
            DFSUtil(*listIter);
        }
    }
    
    
}
void DirectedGraph :: printStrgConnComp()
{
    stack<int> Stack;
    for(int vis = 0; vis < numVertex; vis++)
        visited[vis] = false;
     
    for(int ver = 0; ver < numVertex; ver++)
    {    
        if(!visited[ver])
            fillOrderInStack(ver, Stack);
    }
    
    
    
    DirectedGraph gphTr = gphTranspose( );
    
    for(int ver = 0; ver < numVertex; ver++)
        gphTr.visited[ver] = false;
    
    while(Stack.empty() == false)
    {
        int curVer = Stack.top();
        Stack.pop();
        
        //cout << "Stack 's curVer :" << curVer << endl; 
        if(!gphTr.visited[curVer])
        {
            gphTr.DFSUtil(curVer);
            cout << "next scc group " << endl;
        }
    }
    
}
int main()
{
    DirectedGraph gph(5);
    gph.addEdge(0,2);
    gph.addEdge(0,3);
    gph.addEdge(1,0);
    gph.addEdge(2,1);
    gph.addEdge(3,4);

    gph.printStrgConnComp();
}
