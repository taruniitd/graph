

class DirectedGraph
{
    int numVertex;
    
    list<int> *adjList;
    
    bool visited[];
    
    stack<int> Stack;
    
    public: 
    
    DirectedGraph(int numVertex);
    
    void addEdge(int src, int dest);
    
    void fillOrderInStack();
    
    gphTranspose()
    
    DFSUtil();
    
    printStrgConnComp();
};

DirectedGraph :: DirectedGraph(int V)
{
    numVertex = V;
    adjList = new list<int>[numVertex];
    
}

void DirectedGraph :: addEdge(int src, int dest)
{
    adjList[src].push_back(dest);
}

void DirectedGraph :: fillOrderInStack(int v)
{
    visited[v] = true;
    list<int>::iterator *listIter;
    for(listIter = adjList[ver].begin(); listIter != adjList[ver].end(); ++listIter)
    {
        if(!visited(*listIter))
            fillOrderInStack(*listIter);
    }
        
    Stack.push(*listIter);
    cout << *listIter;
}

DirectedGraph DirectedGraph :: gphTranspose()
{
    DirectedGraph gphTr(numVertex);
    
    
}

void DirectedGraph :: printStrgConnComp()
{
    for(int vis = 0; vis < numVertex; vis++)
        visited[vis] = false;
    cout << "Vertex order in stack :" << endl; 
    for(int ver = 0; ver < numVertex; ver++)
    {    
        fillOrderInStack(ver);
    }
    
    
    
    gphTr = gphTranspose( );
    
    DFSUtil();
    
    
}
int main()
{
    DirectedGraph gph(5);
    gph.addEdge(0,2);
    gph.addEdge(0,3);
    gph.addEdge(1,0);
    gph.addEdge(2,1);
    gph.addEdge(3,4);

    gph.printStrgConnComp();
}
